{"version":3,"sources":["webpack:///./src/components/bg.js","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js","webpack:///./src/components/seo.js"],"names":["StyledBG","styled","div","theme","backgroundColor","colors","link","BG","OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","onNewData","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","error","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","length","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","Promise","resolve","then","memoFn","key","ref","memo","value","queryResult","useQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","SEO","description","lang","title","path","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","charSet","name","content","property","siteUrl","rel","href","defaultProps","meta"],"mappings":"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","file":"d4ad233efeb1d959420253442063e6db7488fdeb-ebb2b1319673ceb0f533.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledBG = styled.div`\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  background-color: ${({ theme }) => theme.backgroundColor};\n  -webkit-transform: translate3d(0, 0, 0);\n  height: -webkit-fill-available;\n  opacity: 1;\n  background: ${({ theme }) =>\n    `radial-gradient(50% 50% at 50% 50%, ${theme.colors.link} 0%, ${theme.backgroundColor} 100%)`};\n  opacity: 0.15;\n  /* z-index: 9999; */\n  user-select: none;\n  pointer-events: none;\n`\n\nconst BG = () => {\n  return <StyledBG />\n}\nexport default BG\n","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function onNewData() {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, title, path }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            siteUrl\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const uniTitle = 'Byteco'\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} | %s`}\n    >\n      <meta charSet=\"utf-8\" />\n      <html lang=\"en\" />\n      <meta name=\"title\" content={title} />\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"keywords\" content={title}></meta>\n\n      <meta property=\"og:title\" content={uniTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content={'byteco-org'} />\n      <meta property=\"og:url\" content={site.siteMetadata.siteUrl + path} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content=\"@Byteco-org\"></meta>\n      <meta name=\"twitter:site\" content=\"@Byteco-org\" />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/rss.xml\" />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n"],"sourceRoot":""}