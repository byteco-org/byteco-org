{"version":3,"sources":["webpack:///./src/pages/success.js","webpack:///./src/components/bg.js","webpack:///./src/components/seo.js"],"names":["StyledAbout","styled","div","theme","colors","grey2","StyledSectionFlex","wrapSmall","Title","h1","StyledCardBG","Img","shadows","huge","Success","props","data","path","location","pathname","nofooter","title","style","flexDirection","paddingBottom","fluid","unicornImage","childImageSharp","width","href","to","StyledBG","backgroundColor","link","BG","SEO","description","lang","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","charSet","name","content","property","siteUrl","rel","type","defaultProps","meta"],"mappings":"4NAQMA,EAAcC,UAAOC,IAAV,uEAAGD,CAAH,wKAQY,qBAAGE,MAAkBC,OAAOC,SAGnDC,EAAoBL,UAAOC,IAAV,6EAAGD,CAAH,ySASD,qBAAGM,UAAsC,SAAR,SAoBjDC,EAAQP,UAAOQ,GAAV,iEAAGR,CAAH,gLAeLS,EAAeT,kBAAOU,KAAV,wEAAGV,CAAH,gHAMF,qBAAGE,MAAkBS,QAAQC,QAsC9BC,UAlCC,SAAAC,GACd,IAAMC,EAAI,OAYV,OACE,kBAAC,IAAD,CAAQC,KAAMF,EAAMG,SAASC,SAAUC,UAAU,GAC/C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKC,MAAM,UAAUJ,KAAMF,EAAMG,SAASC,WAC1C,kBAACnB,EAAD,KACE,kBAACM,EAAD,CAAmBgB,MAAO,CAAEC,cAAe,SAAUC,cAAe,QAClE,kBAACd,EAAD,CAAce,MAAOT,EAAKU,aAAaC,gBAAgBF,QACvD,kBAACjB,EAAD,CAAOc,MAAO,CAAEM,MAAO,SAAvB,2BACA,2BACG,qDACD,uBAAGC,KAAK,8FACL,WAGL,kBAAC,OAAD,CAAMC,GAAG,KAAT,kB,gQCjGJC,E,UAAW9B,QAAOC,IAAV,+DAAGD,CAAH,2OAOQ,qBAAGE,MAAkB6B,mBAI3B,gBAAG7B,EAAH,EAAGA,MAAH,6CAC2BA,EAAMC,OAAO6B,KADxC,QACoD9B,EAAM6B,gBAD1D,YAWDE,IAHJ,WACT,OAAO,kBAACH,EAAD,Q,umBCXT,SAASI,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMhB,EAAe,EAAfA,MAAOJ,EAAQ,EAARA,KAC/BqB,EADuC,OACvCA,KAeFC,EAAkBH,GAAeE,EAAKE,aAAaJ,YAGzD,OACE,kBAAC,IAAD,CACEK,eAAgB,CACdJ,QAEFhB,MAAOA,EACPqB,cAAkBJ,EAAKE,aAAanB,MAAvB,SAEb,0BAAMsB,QAAQ,UACd,0BAAMN,KAAK,OACX,0BAAMO,KAAK,QAAQC,QAASxB,IAC5B,0BAAMuB,KAAK,cAAcC,QAASN,IAClC,0BAAMK,KAAK,WAAWC,QAASxB,IAE/B,0BAAMyB,SAAS,WAAWD,QAhBb,WAiBb,0BAAMC,SAAS,iBAAiBD,QAASN,IACzC,0BAAMO,SAAS,UAAUD,QAAS,eAClC,0BAAMC,SAAS,SAASD,QAASP,EAAKE,aAAaO,QAAU9B,IAC7D,0BAAM6B,SAAS,WAAWD,QAAO,GAAKP,EAAKE,aAAaO,SAAU9B,GAAc,YAA/C,qBAEjC,0BAAM2B,KAAK,eAAeC,QAAQ,wBAClC,0BAAMD,KAAK,kBAAkBC,QAAQ,gBACrC,0BAAMD,KAAK,eAAeC,QAAQ,gBAClC,0BAAMC,SAAS,WAAWD,QAAO,GAAKP,EAAKE,aAAaO,SAAU9B,GAAc,YAA/C,qBAEjC,0BAAM+B,IAAI,YAAYC,KAAK,sBAAsBpB,KAAK,cAK5DM,EAAIe,aAAe,CACjBb,KAAK,KACLc,KAAM,GACNf,YAAY,IAUCD","file":"component---src-pages-success-js-70f818b0bb591bec462b.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport Layout from '../layouts'\nimport SEO from '../components/seo'\nimport BG from '../components/bg'\nimport Img from 'gatsby-image'\n\nconst StyledAbout = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 4rem;\n  margin-bottom: 4rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grey2};\n`\n\nconst StyledSectionFlex = styled.div`\n  padding: 4rem 0;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: space-between;\n  @media (max-width: 1024px) {\n    padding: 1rem;\n    margin-top: 0rem;\n    flex-direction: ${({ wrapSmall }) => (!wrapSmall ? 'row' : 'column')};\n  }\n  @media (max-width: 960px) {\n    padding: 1rem;\n    margin-top: 0rem;\n    width: 100%;\n    max-width: 450px;\n    /* flex-direction: column; */\n  }\n  h1,\n  h2 {\n    /* margin-bottom: 0.5rem; */\n    max-width: 650px;\n  }\n  p {\n    /* margin-bottom: 0.5rem; */\n    max-width: 650px;\n  }\n`\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  /* font-size: 72px; */\n  margin: 2rem 0 3rem 0;\n  pointer-events: none;\n  white-space: wrap;\n  overflow-wrap: normal;\n  max-width: 900px;\n  /* text-align: center; */\n  @media (max-width: 960px) {\n    font-size: 3rem;\n  }\n`\n\nconst StyledCardBG = styled(Img)`\n  width: 100%;\n  height: 250px;\n  background-size: auto;\n  background-position: center;\n  border-radius: 12px;\n  box-shadow: ${({ theme }) => theme.shadows.huge};\n  /* z-index: -1; */\n`\n\nconst Success = props => {\n  const data = useStaticQuery(graphql`\n    {\n      unicornImage: file(relativePath: { eq: \"uni_image.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 1200) {\n            ...GatsbyImageSharpFluid_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Layout path={props.location.pathname} nofooter={true}>\n      <BG />\n      <SEO title=\"Success\" path={props.location.pathname} />\n      <StyledAbout>\n        <StyledSectionFlex style={{ flexDirection: 'column', paddingBottom: '0px' }}>\n          <StyledCardBG fluid={data.unicornImage.childImageSharp.fluid} />\n          <Title style={{ width: '100%' }}>You are now subscribed.</Title>\n          <p>\n            {\"We'll be in touch soon. You can always unsubscribe\"}\n            <a href=\"https://uniswap.us19.list-manage.com/unsubscribe?u=c93471c1443f1e6365b5ca093&id=7d591bff13\">\n              {' here.'}\n            </a>\n          </p>\n          <Link to=\"/\">Back home</Link>\n        </StyledSectionFlex>\n      </StyledAbout>\n    </Layout>\n  )\n}\n\nexport default Success\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledBG = styled.div`\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  background-color: ${({ theme }) => theme.backgroundColor};\n  -webkit-transform: translate3d(0, 0, 0);\n  height: -webkit-fill-available;\n  opacity: 1;\n  background: ${({ theme }) =>\n    `radial-gradient(50% 50% at 50% 50%, ${theme.colors.link} 0%, ${theme.backgroundColor} 100%)`};\n  opacity: 0.15;\n  /* z-index: 9999; */\n  user-select: none;\n  pointer-events: none;\n`\n\nconst BG = () => {\n  return <StyledBG />\n}\nexport default BG\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, title, path }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            siteUrl\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const uniTitle = 'Byteco'\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} | %s`}\n    >\n      <meta charSet=\"utf-8\" />\n      <html lang=\"en\" />\n      <meta name=\"title\" content={title} />\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"keywords\" content={title}></meta>\n\n      <meta property=\"og:title\" content={uniTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content={'byteco-org'} />\n      <meta property=\"og:url\" content={site.siteMetadata.siteUrl + path} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content=\"@Byteco-org\"></meta>\n      <meta name=\"twitter:site\" content=\"@Byteco-org\" />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/rss.xml\" />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n"],"sourceRoot":""}