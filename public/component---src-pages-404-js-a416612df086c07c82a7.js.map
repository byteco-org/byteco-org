{"version":3,"sources":["webpack:///./src/components/bg.js","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["StyledBG","styled","div","theme","backgroundColor","colors","link","BG","SEO","description","lang","title","path","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","charSet","name","content","property","siteUrl","rel","type","href","defaultProps","meta","NotFoundPage","props","location","pathname","style","maxWidth","padding","margin"],"mappings":"yTAGMA,E,UAAWC,QAAOC,IAAV,+DAAGD,CAAH,2OAOQ,qBAAGE,MAAkBC,mBAI3B,gBAAGD,EAAH,EAAGA,MAAH,6CAC2BA,EAAME,OAAOC,KADxC,QACoDH,EAAMC,gBAD1D,YAWDG,IAHJ,WACT,OAAO,kBAACP,EAAD,Q,mFCXT,SAASQ,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC/BC,EADuC,OACvCA,KAeFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAGzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFC,MAAOA,EACPM,cAAkBJ,EAAKE,aAAaJ,MAAvB,SAEb,0BAAMO,QAAQ,UACd,0BAAMR,KAAK,OACX,0BAAMS,KAAK,QAAQC,QAAST,IAC5B,0BAAMQ,KAAK,cAAcC,QAASN,IAClC,0BAAMK,KAAK,WAAWC,QAAST,IAE/B,0BAAMU,SAAS,WAAWD,QAhBb,WAiBb,0BAAMC,SAAS,iBAAiBD,QAASN,IACzC,0BAAMO,SAAS,UAAUD,QAAS,eAClC,0BAAMC,SAAS,SAASD,QAASP,EAAKE,aAAaO,QAAUV,IAC7D,0BAAMS,SAAS,WAAWD,QAAO,GAAKP,EAAKE,aAAaO,SAAUV,GAAc,YAA/C,qBAEjC,0BAAMO,KAAK,eAAeC,QAAQ,wBAClC,0BAAMD,KAAK,kBAAkBC,QAAQ,gBACrC,0BAAMD,KAAK,eAAeC,QAAQ,gBAClC,0BAAMC,SAAS,WAAWD,QAAO,GAAKP,EAAKE,aAAaO,SAAUV,GAAc,YAA/C,qBAEjC,0BAAMW,IAAI,YAAYC,KAAK,sBAAsBC,KAAK,cAK5DjB,EAAIkB,aAAe,CACjBhB,KAAK,KACLiB,KAAM,GACNlB,YAAY,IAUCD,O,kCC1Ef,oEAiBeoB,UAXM,SAAAC,GAAK,OACxB,kBAAC,IAAD,CAAQjB,KAAMiB,EAAMC,SAASC,UAC3B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKpB,MAAM,iBAAiBC,KAAMiB,EAAMC,SAASC,WACjD,yBAAKC,MAAO,CAACC,SAAU,KAAMC,QAAS,GAAGC,OAAQ,SAC/C,kDACA","file":"component---src-pages-404-js-a416612df086c07c82a7.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledBG = styled.div`\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  background-color: ${({ theme }) => theme.backgroundColor};\n  -webkit-transform: translate3d(0, 0, 0);\n  height: -webkit-fill-available;\n  opacity: 1;\n  background: ${({ theme }) =>\n    `radial-gradient(50% 50% at 50% 50%, ${theme.colors.link} 0%, ${theme.backgroundColor} 100%)`};\n  opacity: 0.15;\n  /* z-index: 9999; */\n  user-select: none;\n  pointer-events: none;\n`\n\nconst BG = () => {\n  return <StyledBG />\n}\nexport default BG\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, title, path }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            siteUrl\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const uniTitle = 'Byteco'\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} | %s`}\n    >\n      <meta charSet=\"utf-8\" />\n      <html lang=\"en\" />\n      <meta name=\"title\" content={title} />\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"keywords\" content={title}></meta>\n\n      <meta property=\"og:title\" content={uniTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content={'byteco-org'} />\n      <meta property=\"og:url\" content={site.siteMetadata.siteUrl + path} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content=\"@Byteco-org\"></meta>\n      <meta name=\"twitter:site\" content=\"@Byteco-org\" />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}${path ? path : '/images/'}twitter-card.jpg`} />\n\n      <link rel=\"alternate\" type=\"application/rss+xml\" href=\"/rss.xml\" />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n","import React from 'react'\n\nimport Layout from '../layouts'\nimport SEO from '../components/seo'\nimport BG from '../components/bg'\n\nconst NotFoundPage = props => (\n  <Layout path={props.location.pathname}>\n    <BG />\n    <SEO title=\"404: Not found\" path={props.location.pathname} />\n    <div style={{maxWidth: 1440, padding: 32,margin: 'auto'}}>\n      <h1>Missing Unicorn ðŸ¦„</h1>\n      <p>You just found a page that doesn&#39;t exist.</p>\n    </div>\n  </Layout>\n)\n\nexport default NotFoundPage\n"],"sourceRoot":""}